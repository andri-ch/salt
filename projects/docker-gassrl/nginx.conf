upstream gassrl {
# this is a proxied server, nginx is the reverse proxy server
        #server unix:/tmp/gunicorn.sock fail_timeout=0;
        # For a TCP configuration:
        server 127.0.0.1:8003 fail_timeout=0;
}

server {
    listen 192.168.33.10:80;               ## listen for IPv4
    # listen [::]:80;        ## listen for IPv6
    server_name  www.gassrl.ro gassrl.ro;

    add_header Cache-Control "public";    
      #aaccess_log  /var/log/nginx/access.log main buffer=32k;
      access_log  /var/log/nginx/access.log combined buffer=32k;
      error_log   /var/log/nginx/error.log error;
      expires     max;

     ## SSL Certs
#      ssl on;
#      ssl_certificate     /etc/ssl/certs/www.ecografie-tremisandaniela.ro.pem;   # /usr/local/nginx/conf/cert.pem;
#      ssl_certificate_key /etc/ssl/private/www.ecografie-tremisandaniela.ro.key;    # /usr/local/nginx/conf/cert.key;
#      ssl_session_cache   shared:SSL:10m;
#      ssl_ecdh_curve secp521r1;
     
#    root /home/andrei/Envs/django_test/workspace/dj_test/templates;
      # there should be only one root, the default one; the 'location' directives inherit it.
      client_max_body_size 4G;
      keepalive_timeout 5;      # it was 5 in the gunicorn config; the smaller the better for Django; for ssl it was set to 70
 
 
      location / {
# location allows different configurations depending on the URI. It can be configured using both literal strings and regular expressions.
	
        	 # checks for static file, if not found proxy to app
       		 #root   /usr/share/nginx/html;
       		 #index  index.html index.htm;
	         # $uri - current URI in request:
	         try_files $uri $uri/ @gunicorn;
        # checks if the requested URI exists & can be served by Nginx. If not, is it a directory that can be served. If not, then pass it to your proxy, @gunicorn. Only when Nginx can't serve that requested URI directly does your proxy overhead get involved.
        # Consider how much of your requests are static content(images, css, js,etc.).That's probably a lot of overhead you just saved.
       }
      location @gunicorn {
# The prefix "@" specifies a named location. Such locations are not used during normal processing of requests, they are intended only to process internally redirected requests (see error_page, try_files
	#proxy_pass_header Server;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header Host $http_host;
         	proxy_redirect off;
        	# $remote_addr is the client address:
		proxy_set_header X-Real_IP $remote_addr;
		# $scheme refers to request scheme, "http" or "https":
		#proxy_set_header X-Scheme $scheme;
		proxy_connect_timeout 10;
		proxy_read_timeout 10;
         	proxy_pass http://gassrl;
		#proxy_pass http://localhost:8000/;
         }

        # Serve static files, where admin files exist too:
    location ^~ /static/ {
            alias /var/www/venv/gassrl/workspace/gassrl/static_root/;
        # requesting "/static/top.gif" will send /home/andrei/.../static_root/top.gif
        # and in your project's dir:
        # $: python manage.py collectstatic 
    }


    error_page  404              /404.html;
    # 404 error pages appear when the request URL can't be handled
    # the following doesn't work:
    location = /404.html {
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
       # root -> specifies the document root for the requests.
    }    
    
     ## Note: if{} sections are expensive to process. Please only use them if you need them
     ## and take a look lower down on the page for our discussion of if{} statements.

     ## Only allow GET and HEAD request methods. By default Nginx blocks
     ## all requests type other then GET and HEAD for static content.
     # if ($request_method !~ ^(GET|HEAD)$ ) {
     #   return 405;
     # }

     ## Deny illegal Host headers. 
     # if ($host !~* ^(mydomain.com|www.mydomain.com)$ ) {
     #  return 405;
     # }

     ## Deny certain User-Agents (case insensitive)
     ## The ~* makes it case insensitive as opposed to just a ~
     # if ($http_user_agent ~* (Baiduspider|Jullo) ) {
     #  return 405;
     # }

     ## Deny certain Referers (case insensitive)
     ## The ~* makes it case insensitive as opposed to just a ~
     # if ($http_referer ~* (babes|click|diamond|forsale|girl|jewelry|love|nudit|organic|poker|porn|poweroversoftware|sex|teen|video|webcam|zippo) ) {
     #  return 405;
     # }

     ## Redirect from www to non-www
     # if ($host = 'www.mydomain.com' ) {
     #  rewrite  ^/(.*)$  http://mydomain.com/$1  permanent;
     # }

     ## Stop Image and Document Hijacking
      location ~* (\.jpg|\.gif|\.png|alinia\.css)$ {
        if ($http_referer !~ ^(https://$server_name) ) {
          return 404;
        }
      }

     ## Contact page access restricted to example.com referer. You may want to
     ## restrict access to a page to only those clients who clicked on the link from
     ## your site. A common setup is to only allow access to your contacts page if the
     ## user came from a link on one of your pages. This may stop some spam.
#      location ~* contact_us\.html {
#         if ($http_referer !~ ^(https://example.com) ) {
#            return 403;
#         }
#      }
#
     ## Restricted Access directory with password in access_list
#      location ^~ /secure/ {
#            allow 127.0.0.1/32;
#            allow 10.10.10.0/24;
#            deny all;
#            auth_basic "RESTRICTED ACCESS";
#            auth_basic_user_file /var/www/htdocs/secure/access_list;
#        }
#
     ## All other errors get the generic error page
#      error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 495 496 497
#                 500 501 502 503 504 505 506 507 /error_page.html;
#      location  /example_error_page.html {
#          internal;
#      }
  }
